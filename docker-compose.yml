services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka_producer:
    build:
      context: .
      dockerfile: ./streaming/kafka_producer/Dockerfile
    container_name: kafka_producer
    depends_on:
      - broker
    environment:
      - KAFKA_BROKER=broker:9092

  kafka_consumer:
    build:
      context: ./streaming
    volumes:
      - ./feature_repo:/app/feature_repo
    container_name: kafka_consumer
    depends_on:
      - broker
      - registry
      - redis
    environment:
      - KAFKA_BROKER=broker:9092
      - FEAST_REPO_PATH=/app/feature_repo


  flink_job:
    build:
      context: ./streaming/transformer
    container_name: flink_job
    depends_on:
      - broker
      - redis
    environment:
      - KAFKA_BROKER=broker:9092
      - FLINK_JOB_MANAGER_RPC_ADDRESS=jobmanager
    ports:
      - "8081:8081" # Flink web dashboard
    volumes:
    - ./streaming/transformer/conf/flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
    - ./streaming/transformer/flink_job.py:/opt/flink/usrlib/flink_job.py
    restart: always

  registry:
    container_name: registry
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=feast
    ports:
      - "55001:5432"
    volumes:
      # Separate data and configuration volumes
      - ./feast-postgres-registry:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf

    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c listen_addresses='*'
      -c max_connections=200

    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"

  dask-scheduler:
    image: ghcr.io/dask/dask:latest
    container_name: dask-scheduler
    command: dask-scheduler
    ports:
      - "8786:8786"
      - "8787:8787"

  dask-worker:
    image: ghcr.io/dask/dask:latest
    container_name: dask-worker
    command: dask-worker dask-scheduler:8786
    depends_on:
      - dask-scheduler
    links:
      - dask-scheduler

  feature_server:
    container_name: feast_feature_server
    build:
      context: ./feature_repo
    volumes:
      - ./feature_repo:/app/feature_repo
    depends_on:
      - registry
      - redis
      - dask-worker
    ports:
      - "6566:6566"
    links:
      - registry
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:6566/health}"
      interval: "5s"
      retries: 5
